# -*- coding: utf-8 -*-
"""air_quality_prediction_model_lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kx-xdLslmVyutJFjrGOzSLH3E0A0-DDg

# Importing and Preprocessing
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

#import os
#for dirname, _, filenames in os.walk('/kaggle/input'):
#    for filename in filenames:
#        print(os.path.join(dirname, filename))

from google.colab import files
uploaded = files.upload()

import io
import pandas as pd

df = pd.read_csv(io.StringIO(uploaded['air-quality-india.csv'].decode('utf-8')))

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings("ignore")

import datetime

import math
from sklearn.preprocessing import MinMaxScaler

from tqdm import tqdm
plt.style.use("fivethirtyeight")
from keras.models import Sequential
from keras.layers import Dense, LSTM

# df=pd.read_csv('/kaggle/input/air-quality-data-in-india/air-quality-india.csv')

df.info()

df["Timestamp"] = pd.to_datetime(df["Timestamp"])

df.head()

df['Date']=df["Timestamp"].dt.date

"""# Visualization

* Time series by days
"""

df.plot(x='Timestamp',y='PM2.5',figsize=(20,8))
plt.xticks(rotation=45)

plt.show()

"""* Time series by year average"""

df.groupby('Year')['PM2.5'].mean().plot()

"""* Boxplot by year"""

df_year=df.loc[:,['Year','PM2.5']]
sns.boxplot(x='Year', y='PM2.5',data=df_year)

"""* Time series by month average"""

df.groupby('Month')['PM2.5'].mean().plot()

"""* Boxplot by month"""

df_month=df.loc[:,['Month','PM2.5']]
sns.boxplot(x='Month', y='PM2.5',data=df_month)

"""* Time series by day average"""

df.groupby('Day')['PM2.5'].mean().plot()

"""* Boxplot by day"""

df_day=df.loc[:,['Day','PM2.5']]
plt.figure(figsize=(10,8))
sns.boxplot(x='Day', y='PM2.5',data=df_day)

"""* Time series by hour average"""

df.groupby('Hour')['PM2.5'].mean().plot()

"""* Boxplot by hour"""

df_hour=df.loc[:,['Hour','PM2.5']]
plt.figure(figsize=(10,8))
sns.boxplot(x='Hour', y='PM2.5',data=df_hour)

"""# Prediction Model"""

df_date=pd.DataFrame(df.groupby('Date')['PM2.5'].mean())
df_date

"""* Time series by each days average"""

df_date.plot(figsize=(20,8))

"""* Split data into train 80% and test 20%"""

dataset  = df_date.values
training_data_len = math.ceil(len(dataset)*.8)
training_data_len

"""* Standardization by MinMaxScaler"""

sc = MinMaxScaler(feature_range=(0,1))
scaled_data = sc.fit_transform(dataset)
scaled_data

train_data = scaled_data[0:training_data_len, :]
x_train = []
y_train = []
num = 60
for i in range(num, len(train_data)):
    x_train.append(train_data[i-num:i , 0])
    y_train.append(train_data[i , 0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))
x_train.shape

"""* Modeling"""

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer = "adam", loss = "mean_squared_error")

model.fit(x_train,y_train, batch_size=1, epochs=1)

"""* Prediction"""

test_data = scaled_data[training_data_len-60: , :]
x_test = []
y_test = dataset[training_data_len:,:]
for i in range(num, len(test_data)):
      x_test.append(test_data[i-num:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

predictions = model.predict(x_test)
predictions = sc.inverse_transform(predictions)

rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse

train = df_date[:training_data_len]
valid = df_date[training_data_len:]
valid["Predictions"] = predictions
valid

plt.figure(figsize=(20,8))
plt.title("Model for PM2.5")
plt.xlabel("Date", fontsize = 15)
plt.ylabel("PM2.5",fontsize=15)
plt.plot(train[df_date.columns])
plt.plot(valid['PM2.5'])
plt.plot(valid["Predictions"])
plt.legend(["Train","Val","Predictions"])